{"ast":null,"code":"var _jsxFileName = \"/Users/Lukas Mac/Documents/GitHub/if-codetest/src/components/OpeningHours/OpeningHours.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./OpeningHours.scss\";\nimport Modal from \"../Modal/Modal\";\nimport { toZonedTime } from \"date-fns-tz\";\nimport Button from \"../Buttons/Button/Button\";\n\n/**\n * OpeningHours component displays the opening hours of the office.\n * Compares the current time in Riga with the office hours to determine if the office is open or closed.\n * Depending on the result, a modal is displayed with a message.\n * The user can check if the office is open by clicking a button.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const OpeningHours = () => {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const fetchString = \"https://worldtimeapi.org/api/timezone/Europe/Riga\";\n  const OFFICE_OPEN_HOUR = 8;\n  const OFFICE_CLOSE_HOUR = 17;\n  const OFFICE_OPEN_DAY = 1; // Monday\n  const OFFICE_CLOSE_DAY = 5; // Friday\n\n  const fetchOfficeHours = async () => {\n    const response = await fetch(fetchString);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch time.\");\n    }\n    return response.json();\n  };\n  const isOfficeOpen = currentRigaTime => {\n    // Get the current hour and day, to compare with the office hours\n    const currentHour = currentRigaTime.getHours();\n    const currentDay = currentRigaTime.getDay();\n    return currentHour >= OFFICE_OPEN_HOUR && currentHour < OFFICE_CLOSE_HOUR && OFFICE_OPEN_DAY <= currentDay && currentDay <= OFFICE_CLOSE_DAY;\n  };\n  const checkOfficeHours = async () => {\n    try {\n      const data = await fetchOfficeHours();\n      // Fetch the current time in Riga and store as a WorldTimeApiResponse object\n      // Utilize this package to ensure the time is correct, and always as Riga's time\n      const currentRigaTime = toZonedTime(data.datetime, data.timezone);\n      if (isOfficeOpen(currentRigaTime)) {\n        setModalMessage(\"Kontoret √§r √∂ppet! Kom g√§rna f√∂rbi.üéâ\");\n      } else {\n        setModalMessage(\"Kontoret √§r st√§ngt. V√§lkommen √•ter imorgon!\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching time:\", error);\n      setModalMessage(\"N√•got gick fel n√§r vi skulle h√§mta tiden. F√∂rs√∂k igen senare.\");\n    } finally {\n      setIsModalOpen(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container center open__hours__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"center\",\n        children: \"V\\xE5ra \\xF6ppettider!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"opening__hours\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"M\\xE5ndag-Fredag\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"08:00 - 17:00\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"opening__hours\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"L\\xF6rdag - S\\xF6ndag\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"St\\xE4ngt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        btnText: \"Klicka h\\xE4r f\\xF6r att se om vi har \\xF6ppet\",\n        secondary: true,\n        onClick: checkOfficeHours\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), isModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n        onClose: () => setIsModalOpen(false),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: modalMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(OpeningHours, \"2tAYVtv9x+ooTAY3TRbG/TC77kE=\");\n_c = OpeningHours;\nvar _c;\n$RefreshReg$(_c, \"OpeningHours\");","map":{"version":3,"names":["useState","Modal","toZonedTime","Button","jsxDEV","_jsxDEV","OpeningHours","_s","isModalOpen","setIsModalOpen","modalMessage","setModalMessage","fetchString","OFFICE_OPEN_HOUR","OFFICE_CLOSE_HOUR","OFFICE_OPEN_DAY","OFFICE_CLOSE_DAY","fetchOfficeHours","response","fetch","ok","Error","json","isOfficeOpen","currentRigaTime","currentHour","getHours","currentDay","getDay","checkOfficeHours","data","datetime","timezone","error","console","children","className","fileName","_jsxFileName","lineNumber","columnNumber","btnText","secondary","onClick","onClose","_c","$RefreshReg$"],"sources":["/Users/Lukas Mac/Documents/GitHub/if-codetest/src/components/OpeningHours/OpeningHours.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport \"./OpeningHours.scss\";\nimport { WorldTimeApiResponse } from \"../../types\";\nimport Modal from \"../Modal/Modal\";\nimport { toZonedTime } from \"date-fns-tz\";\nimport Button from \"../Buttons/Button/Button\";\n\n/**\n * OpeningHours component displays the opening hours of the office.\n * Compares the current time in Riga with the office hours to determine if the office is open or closed.\n * Depending on the result, a modal is displayed with a message.\n * The user can check if the office is open by clicking a button.\n */\n\nexport const OpeningHours = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalMessage, setModalMessage] = useState<string>(\"\");\n\n  const fetchString = \"https://worldtimeapi.org/api/timezone/Europe/Riga\";\n  const OFFICE_OPEN_HOUR = 8;\n  const OFFICE_CLOSE_HOUR = 17;\n  const OFFICE_OPEN_DAY = 1; // Monday\n  const OFFICE_CLOSE_DAY = 5; // Friday\n\n  const fetchOfficeHours = async (): Promise<WorldTimeApiResponse> => {\n    const response = await fetch(fetchString);\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch time.\");\n    }\n\n    return response.json();\n  };\n\n  const isOfficeOpen = (currentRigaTime: Date): boolean => {\n    // Get the current hour and day, to compare with the office hours\n    const currentHour = currentRigaTime.getHours();\n    const currentDay = currentRigaTime.getDay();\n\n    return (\n      currentHour >= OFFICE_OPEN_HOUR &&\n      currentHour < OFFICE_CLOSE_HOUR &&\n      OFFICE_OPEN_DAY <= currentDay &&\n      currentDay <= OFFICE_CLOSE_DAY\n    );\n  };\n\n  const checkOfficeHours = async () => {\n    try {\n      const data = await fetchOfficeHours();\n      // Fetch the current time in Riga and store as a WorldTimeApiResponse object\n      // Utilize this package to ensure the time is correct, and always as Riga's time\n      const currentRigaTime = toZonedTime(data.datetime, data.timezone);\n\n      if (isOfficeOpen(currentRigaTime)) {\n        setModalMessage(\"Kontoret √§r √∂ppet! Kom g√§rna f√∂rbi.üéâ\");\n      } else {\n        setModalMessage(\"Kontoret √§r st√§ngt. V√§lkommen √•ter imorgon!\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching time:\", error);\n      setModalMessage(\n        \"N√•got gick fel n√§r vi skulle h√§mta tiden. F√∂rs√∂k igen senare.\"\n      );\n    } finally {\n      setIsModalOpen(true);\n    }\n  };\n\n  return (\n    <section>\n      <div className=\"container center open__hours__container\">\n        <h3 className=\"center\">V√•ra √∂ppettider!</h3>\n        <div>\n          <div className=\"opening__hours\">\n            <h4>M√•ndag-Fredag</h4>\n            <p>08:00 - 17:00</p>\n          </div>\n          <div className=\"opening__hours\">\n            <h4>L√∂rdag - S√∂ndag</h4>\n            <p>St√§ngt</p>\n          </div>\n        </div>\n        <Button\n          btnText=\"Klicka h√§r f√∂r att se om vi har √∂ppet\"\n          secondary\n          onClick={checkOfficeHours}\n        />\n        {isModalOpen && (\n          <Modal onClose={() => setIsModalOpen(false)}>\n            <p>{modalMessage}</p>\n          </Modal>\n        )}\n      </div>\n    </section>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}